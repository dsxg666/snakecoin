// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: snakecoin.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *GetBalanceReq) Reset() {
	*x = GetBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceReq) ProtoMessage() {}

func (x *GetBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceReq.ProtoReflect.Descriptor instead.
func (*GetBalanceReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{0}
}

func (x *GetBalanceReq) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type GetBalanceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance string `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *GetBalanceResp) Reset() {
	*x = GetBalanceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResp) ProtoMessage() {}

func (x *GetBalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResp.ProtoReflect.Descriptor instead.
func (*GetBalanceResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{1}
}

func (x *GetBalanceResp) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type GetAllTxReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllTxReq) Reset() {
	*x = GetAllTxReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTxReq) ProtoMessage() {}

func (x *GetAllTxReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTxReq.ProtoReflect.Descriptor instead.
func (*GetAllTxReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{2}
}

type GetAllTxResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*GetAllTxResp_Tx `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *GetAllTxResp) Reset() {
	*x = GetAllTxResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTxResp) ProtoMessage() {}

func (x *GetAllTxResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTxResp.ProtoReflect.Descriptor instead.
func (*GetAllTxResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllTxResp) GetTxs() []*GetAllTxResp_Tx {
	if x != nil {
		return x.Txs
	}
	return nil
}

type GetAllBlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllBlockReq) Reset() {
	*x = GetAllBlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBlockReq) ProtoMessage() {}

func (x *GetAllBlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBlockReq.ProtoReflect.Descriptor instead.
func (*GetAllBlockReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{4}
}

type GetAllBlockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bs []*GetAllBlockResp_Block `protobuf:"bytes,1,rep,name=bs,proto3" json:"bs,omitempty"`
}

func (x *GetAllBlockResp) Reset() {
	*x = GetAllBlockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBlockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBlockResp) ProtoMessage() {}

func (x *GetAllBlockResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBlockResp.ProtoReflect.Descriptor instead.
func (*GetAllBlockResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllBlockResp) GetBs() []*GetAllBlockResp_Block {
	if x != nil {
		return x.Bs
	}
	return nil
}

type NewBlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Miner string `protobuf:"bytes,2,opt,name=miner,proto3" json:"miner,omitempty"`
}

func (x *NewBlockReq) Reset() {
	*x = NewBlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlockReq) ProtoMessage() {}

func (x *NewBlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlockReq.ProtoReflect.Descriptor instead.
func (*NewBlockReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{6}
}

func (x *NewBlockReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *NewBlockReq) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

type NewBlockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *NewBlockResp) Reset() {
	*x = NewBlockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewBlockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBlockResp) ProtoMessage() {}

func (x *NewBlockResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBlockResp.ProtoReflect.Descriptor instead.
func (*NewBlockResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{7}
}

func (x *NewBlockResp) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type MineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MineReq) Reset() {
	*x = MineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MineReq) ProtoMessage() {}

func (x *MineReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MineReq.ProtoReflect.Descriptor instead.
func (*MineReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{8}
}

type MineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *MineResp) Reset() {
	*x = MineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MineResp) ProtoMessage() {}

func (x *MineResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MineResp.ProtoReflect.Descriptor instead.
func (*MineResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{9}
}

func (x *MineResp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type GetInfoByTxHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetInfoByTxHashReq) Reset() {
	*x = GetInfoByTxHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoByTxHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoByTxHashReq) ProtoMessage() {}

func (x *GetInfoByTxHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoByTxHashReq.ProtoReflect.Descriptor instead.
func (*GetInfoByTxHashReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{10}
}

func (x *GetInfoByTxHashReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetInfoByTxHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	From   string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To     string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Time   string `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Block  string `protobuf:"bytes,6,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetInfoByTxHashResp) Reset() {
	*x = GetInfoByTxHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoByTxHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoByTxHashResp) ProtoMessage() {}

func (x *GetInfoByTxHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoByTxHashResp.ProtoReflect.Descriptor instead.
func (*GetInfoByTxHashResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{11}
}

func (x *GetInfoByTxHashResp) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *GetInfoByTxHashResp) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetInfoByTxHashResp) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetInfoByTxHashResp) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetInfoByTxHashResp) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetInfoByTxHashResp) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

type GetTxPoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTxPoolReq) Reset() {
	*x = GetTxPoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxPoolReq) ProtoMessage() {}

func (x *GetTxPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxPoolReq.ProtoReflect.Descriptor instead.
func (*GetTxPoolReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{12}
}

type GetTxPoolResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*GetTxPoolResp_Tx `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (x *GetTxPoolResp) Reset() {
	*x = GetTxPoolResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxPoolResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxPoolResp) ProtoMessage() {}

func (x *GetTxPoolResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxPoolResp.ProtoReflect.Descriptor instead.
func (*GetTxPoolResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{13}
}

func (x *GetTxPoolResp) GetTxs() []*GetTxPoolResp_Tx {
	if x != nil {
		return x.Txs
	}
	return nil
}

type NewAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *NewAccountReq) Reset() {
	*x = NewAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAccountReq) ProtoMessage() {}

func (x *NewAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAccountReq.ProtoReflect.Descriptor instead.
func (*NewAccountReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{14}
}

func (x *NewAccountReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type NewAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *NewAccountResp) Reset() {
	*x = NewAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAccountResp) ProtoMessage() {}

func (x *NewAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAccountResp.ProtoReflect.Descriptor instead.
func (*NewAccountResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{15}
}

func (x *NewAccountResp) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type NewTxReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	From     string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To       string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount   string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *NewTxReq) Reset() {
	*x = NewTxReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTxReq) ProtoMessage() {}

func (x *NewTxReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTxReq.ProtoReflect.Descriptor instead.
func (*NewTxReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{16}
}

func (x *NewTxReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *NewTxReq) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *NewTxReq) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *NewTxReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type NewTxResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *NewTxResp) Reset() {
	*x = NewTxResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTxResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTxResp) ProtoMessage() {}

func (x *NewTxResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTxResp.ProtoReflect.Descriptor instead.
func (*NewTxResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{17}
}

func (x *NewTxResp) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type GetInfoByBlockNumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num string `protobuf:"bytes,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *GetInfoByBlockNumReq) Reset() {
	*x = GetInfoByBlockNumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoByBlockNumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoByBlockNumReq) ProtoMessage() {}

func (x *GetInfoByBlockNumReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoByBlockNumReq.ProtoReflect.Descriptor instead.
func (*GetInfoByBlockNumReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{18}
}

func (x *GetInfoByBlockNumReq) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

type GetInfoByBlockNumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number         string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Nonce          string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Time           string `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Txs            string `protobuf:"bytes,4,opt,name=txs,proto3" json:"txs,omitempty"`
	Reward         string `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	Difficulty     string `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Coinbase       string `protobuf:"bytes,7,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	BlockHash      string `protobuf:"bytes,8,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	PrevBlockHash  string `protobuf:"bytes,9,opt,name=prevBlockHash,proto3" json:"prevBlockHash,omitempty"`
	StateTreeRoot  string `protobuf:"bytes,10,opt,name=stateTreeRoot,proto3" json:"stateTreeRoot,omitempty"`
	MerkleTreeRoot string `protobuf:"bytes,11,opt,name=merkleTreeRoot,proto3" json:"merkleTreeRoot,omitempty"`
}

func (x *GetInfoByBlockNumResp) Reset() {
	*x = GetInfoByBlockNumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoByBlockNumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoByBlockNumResp) ProtoMessage() {}

func (x *GetInfoByBlockNumResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoByBlockNumResp.ProtoReflect.Descriptor instead.
func (*GetInfoByBlockNumResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{19}
}

func (x *GetInfoByBlockNumResp) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetTxs() string {
	if x != nil {
		return x.Txs
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetReward() string {
	if x != nil {
		return x.Reward
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetPrevBlockHash() string {
	if x != nil {
		return x.PrevBlockHash
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetStateTreeRoot() string {
	if x != nil {
		return x.StateTreeRoot
	}
	return ""
}

func (x *GetInfoByBlockNumResp) GetMerkleTreeRoot() string {
	if x != nil {
		return x.MerkleTreeRoot
	}
	return ""
}

type GetInfoByBlockHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetInfoByBlockHashReq) Reset() {
	*x = GetInfoByBlockHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoByBlockHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoByBlockHashReq) ProtoMessage() {}

func (x *GetInfoByBlockHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoByBlockHashReq.ProtoReflect.Descriptor instead.
func (*GetInfoByBlockHashReq) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{20}
}

func (x *GetInfoByBlockHashReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetInfoByBlockHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number         string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Nonce          string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Time           string `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Txs            string `protobuf:"bytes,4,opt,name=txs,proto3" json:"txs,omitempty"`
	Reward         string `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
	Difficulty     string `protobuf:"bytes,6,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Coinbase       string `protobuf:"bytes,7,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	BlockHash      string `protobuf:"bytes,8,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	PrevBlockHash  string `protobuf:"bytes,9,opt,name=prevBlockHash,proto3" json:"prevBlockHash,omitempty"`
	StateTreeRoot  string `protobuf:"bytes,10,opt,name=stateTreeRoot,proto3" json:"stateTreeRoot,omitempty"`
	MerkleTreeRoot string `protobuf:"bytes,11,opt,name=merkleTreeRoot,proto3" json:"merkleTreeRoot,omitempty"`
}

func (x *GetInfoByBlockHashResp) Reset() {
	*x = GetInfoByBlockHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoByBlockHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoByBlockHashResp) ProtoMessage() {}

func (x *GetInfoByBlockHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoByBlockHashResp.ProtoReflect.Descriptor instead.
func (*GetInfoByBlockHashResp) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{21}
}

func (x *GetInfoByBlockHashResp) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetTxs() string {
	if x != nil {
		return x.Txs
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetReward() string {
	if x != nil {
		return x.Reward
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetPrevBlockHash() string {
	if x != nil {
		return x.PrevBlockHash
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetStateTreeRoot() string {
	if x != nil {
		return x.StateTreeRoot
	}
	return ""
}

func (x *GetInfoByBlockHashResp) GetMerkleTreeRoot() string {
	if x != nil {
		return x.MerkleTreeRoot
	}
	return ""
}

type GetAllTxResp_Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	From   string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To     string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Time   string `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	Block  string `protobuf:"bytes,6,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetAllTxResp_Tx) Reset() {
	*x = GetAllTxResp_Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllTxResp_Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllTxResp_Tx) ProtoMessage() {}

func (x *GetAllTxResp_Tx) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllTxResp_Tx.ProtoReflect.Descriptor instead.
func (*GetAllTxResp_Tx) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetAllTxResp_Tx) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *GetAllTxResp_Tx) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetAllTxResp_Tx) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetAllTxResp_Tx) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetAllTxResp_Tx) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetAllTxResp_Tx) GetBlock() string {
	if x != nil {
		return x.Block
	}
	return ""
}

type GetAllBlockResp_Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Time   string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Txs    string `protobuf:"bytes,3,opt,name=txs,proto3" json:"txs,omitempty"`
	Miner  string `protobuf:"bytes,4,opt,name=miner,proto3" json:"miner,omitempty"`
	Reward string `protobuf:"bytes,5,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *GetAllBlockResp_Block) Reset() {
	*x = GetAllBlockResp_Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBlockResp_Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBlockResp_Block) ProtoMessage() {}

func (x *GetAllBlockResp_Block) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBlockResp_Block.ProtoReflect.Descriptor instead.
func (*GetAllBlockResp_Block) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetAllBlockResp_Block) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *GetAllBlockResp_Block) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetAllBlockResp_Block) GetTxs() string {
	if x != nil {
		return x.Txs
	}
	return ""
}

func (x *GetAllBlockResp_Block) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *GetAllBlockResp_Block) GetReward() string {
	if x != nil {
		return x.Reward
	}
	return ""
}

type GetTxPoolResp_Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash string `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	From   string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To     string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Time   string `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *GetTxPoolResp_Tx) Reset() {
	*x = GetTxPoolResp_Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snakecoin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxPoolResp_Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxPoolResp_Tx) ProtoMessage() {}

func (x *GetTxPoolResp_Tx) ProtoReflect() protoreflect.Message {
	mi := &file_snakecoin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxPoolResp_Tx.ProtoReflect.Descriptor instead.
func (*GetTxPoolResp_Tx) Descriptor() ([]byte, []int) {
	return file_snakecoin_proto_rawDescGZIP(), []int{13, 0}
}

func (x *GetTxPoolResp_Tx) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *GetTxPoolResp_Tx) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GetTxPoolResp_Tx) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetTxPoolResp_Tx) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *GetTxPoolResp_Tx) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

var File_snakecoin_proto protoreflect.FileDescriptor

var file_snakecoin_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x23, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x22, 0x2a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x78, 0x52, 0x65,
	0x71, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x54,
	0x78, 0x52, 0x03, 0x74, 0x78, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x10, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x22, 0xae, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x26, 0x0a, 0x02, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x02, 0x62, 0x73, 0x1a, 0x73, 0x0a, 0x05, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x78, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x39,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x4e, 0x65, 0x77,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x09, 0x0a, 0x07, 0x4d, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x22, 0x20, 0x0a, 0x08, 0x4d, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x0e, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x22, 0xa2, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23,
	0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x78, 0x52, 0x03,
	0x74, 0x78, 0x73, 0x1a, 0x6c, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x2a,
	0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x21,
	0x0a, 0x09, 0x4e, 0x65, 0x77, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x28, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0xd1, 0x02, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x22,
	0x2b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xd2, 0x02, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x78, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x32, 0xaf, 0x04, 0x0a, 0x03, 0x52, 0x70, 0x63, 0x12, 0x2f, 0x0a, 0x0a, 0x4e, 0x65, 0x77,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12,
	0x15, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x65, 0x77,
	0x54, 0x78, 0x12, 0x09, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e,
	0x4e, 0x65, 0x77, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x54, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x13, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x1d, 0x0a, 0x04, 0x4d, 0x69, 0x6e,
	0x65, 0x12, 0x08, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x4d, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x54, 0x78, 0x12, 0x0c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x78, 0x52, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x0e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snakecoin_proto_rawDescOnce sync.Once
	file_snakecoin_proto_rawDescData = file_snakecoin_proto_rawDesc
)

func file_snakecoin_proto_rawDescGZIP() []byte {
	file_snakecoin_proto_rawDescOnce.Do(func() {
		file_snakecoin_proto_rawDescData = protoimpl.X.CompressGZIP(file_snakecoin_proto_rawDescData)
	})
	return file_snakecoin_proto_rawDescData
}

var file_snakecoin_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_snakecoin_proto_goTypes = []interface{}{
	(*GetBalanceReq)(nil),          // 0: GetBalanceReq
	(*GetBalanceResp)(nil),         // 1: GetBalanceResp
	(*GetAllTxReq)(nil),            // 2: GetAllTxReq
	(*GetAllTxResp)(nil),           // 3: GetAllTxResp
	(*GetAllBlockReq)(nil),         // 4: GetAllBlockReq
	(*GetAllBlockResp)(nil),        // 5: GetAllBlockResp
	(*NewBlockReq)(nil),            // 6: NewBlockReq
	(*NewBlockResp)(nil),           // 7: NewBlockResp
	(*MineReq)(nil),                // 8: MineReq
	(*MineResp)(nil),               // 9: MineResp
	(*GetInfoByTxHashReq)(nil),     // 10: GetInfoByTxHashReq
	(*GetInfoByTxHashResp)(nil),    // 11: GetInfoByTxHashResp
	(*GetTxPoolReq)(nil),           // 12: GetTxPoolReq
	(*GetTxPoolResp)(nil),          // 13: GetTxPoolResp
	(*NewAccountReq)(nil),          // 14: NewAccountReq
	(*NewAccountResp)(nil),         // 15: NewAccountResp
	(*NewTxReq)(nil),               // 16: NewTxReq
	(*NewTxResp)(nil),              // 17: NewTxResp
	(*GetInfoByBlockNumReq)(nil),   // 18: GetInfoByBlockNumReq
	(*GetInfoByBlockNumResp)(nil),  // 19: GetInfoByBlockNumResp
	(*GetInfoByBlockHashReq)(nil),  // 20: GetInfoByBlockHashReq
	(*GetInfoByBlockHashResp)(nil), // 21: GetInfoByBlockHashResp
	(*GetAllTxResp_Tx)(nil),        // 22: GetAllTxResp.Tx
	(*GetAllBlockResp_Block)(nil),  // 23: GetAllBlockResp.Block
	(*GetTxPoolResp_Tx)(nil),       // 24: GetTxPoolResp.Tx
}
var file_snakecoin_proto_depIdxs = []int32{
	22, // 0: GetAllTxResp.txs:type_name -> GetAllTxResp.Tx
	23, // 1: GetAllBlockResp.bs:type_name -> GetAllBlockResp.Block
	24, // 2: GetTxPoolResp.txs:type_name -> GetTxPoolResp.Tx
	14, // 3: Rpc.NewAccount:input_type -> NewAccountReq
	18, // 4: Rpc.GetInfoByBlockNum:input_type -> GetInfoByBlockNumReq
	20, // 5: Rpc.GetInfoByBlockHash:input_type -> GetInfoByBlockHashReq
	16, // 6: Rpc.NewTx:input_type -> NewTxReq
	12, // 7: Rpc.GetTxPool:input_type -> GetTxPoolReq
	10, // 8: Rpc.GetInfoByTxHash:input_type -> GetInfoByTxHashReq
	8,  // 9: Rpc.Mine:input_type -> MineReq
	6,  // 10: Rpc.NewBlock:input_type -> NewBlockReq
	4,  // 11: Rpc.GetAllBlock:input_type -> GetAllBlockReq
	2,  // 12: Rpc.GetAllTx:input_type -> GetAllTxReq
	0,  // 13: Rpc.GetBalance:input_type -> GetBalanceReq
	15, // 14: Rpc.NewAccount:output_type -> NewAccountResp
	19, // 15: Rpc.GetInfoByBlockNum:output_type -> GetInfoByBlockNumResp
	21, // 16: Rpc.GetInfoByBlockHash:output_type -> GetInfoByBlockHashResp
	17, // 17: Rpc.NewTx:output_type -> NewTxResp
	13, // 18: Rpc.GetTxPool:output_type -> GetTxPoolResp
	11, // 19: Rpc.GetInfoByTxHash:output_type -> GetInfoByTxHashResp
	9,  // 20: Rpc.Mine:output_type -> MineResp
	7,  // 21: Rpc.NewBlock:output_type -> NewBlockResp
	5,  // 22: Rpc.GetAllBlock:output_type -> GetAllBlockResp
	3,  // 23: Rpc.GetAllTx:output_type -> GetAllTxResp
	1,  // 24: Rpc.GetBalance:output_type -> GetBalanceResp
	14, // [14:25] is the sub-list for method output_type
	3,  // [3:14] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_snakecoin_proto_init() }
func file_snakecoin_proto_init() {
	if File_snakecoin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snakecoin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTxReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTxResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBlockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewBlockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoByTxHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoByTxHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxPoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxPoolResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTxReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTxResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoByBlockNumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoByBlockNumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoByBlockHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoByBlockHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllTxResp_Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBlockResp_Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snakecoin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxPoolResp_Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snakecoin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_snakecoin_proto_goTypes,
		DependencyIndexes: file_snakecoin_proto_depIdxs,
		MessageInfos:      file_snakecoin_proto_msgTypes,
	}.Build()
	File_snakecoin_proto = out.File
	file_snakecoin_proto_rawDesc = nil
	file_snakecoin_proto_goTypes = nil
	file_snakecoin_proto_depIdxs = nil
}
