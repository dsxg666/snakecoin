// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: snakecoin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rpc_NewAccount_FullMethodName         = "/Rpc/NewAccount"
	Rpc_GetInfoByBlockNum_FullMethodName  = "/Rpc/GetInfoByBlockNum"
	Rpc_GetInfoByBlockHash_FullMethodName = "/Rpc/GetInfoByBlockHash"
	Rpc_NewTx_FullMethodName              = "/Rpc/NewTx"
	Rpc_GetTxPool_FullMethodName          = "/Rpc/GetTxPool"
	Rpc_GetInfoByTxHash_FullMethodName    = "/Rpc/GetInfoByTxHash"
	Rpc_Mine_FullMethodName               = "/Rpc/Mine"
	Rpc_NewBlock_FullMethodName           = "/Rpc/NewBlock"
	Rpc_GetAllBlock_FullMethodName        = "/Rpc/GetAllBlock"
	Rpc_GetAllTx_FullMethodName           = "/Rpc/GetAllTx"
	Rpc_GetBalance_FullMethodName         = "/Rpc/GetBalance"
)

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcClient interface {
	NewAccount(ctx context.Context, in *NewAccountReq, opts ...grpc.CallOption) (*NewAccountResp, error)
	GetInfoByBlockNum(ctx context.Context, in *GetInfoByBlockNumReq, opts ...grpc.CallOption) (*GetInfoByBlockNumResp, error)
	GetInfoByBlockHash(ctx context.Context, in *GetInfoByBlockHashReq, opts ...grpc.CallOption) (*GetInfoByBlockHashResp, error)
	NewTx(ctx context.Context, in *NewTxReq, opts ...grpc.CallOption) (*NewTxResp, error)
	GetTxPool(ctx context.Context, in *GetTxPoolReq, opts ...grpc.CallOption) (*GetTxPoolResp, error)
	GetInfoByTxHash(ctx context.Context, in *GetInfoByTxHashReq, opts ...grpc.CallOption) (*GetInfoByTxHashResp, error)
	Mine(ctx context.Context, in *MineReq, opts ...grpc.CallOption) (*MineResp, error)
	NewBlock(ctx context.Context, in *NewBlockReq, opts ...grpc.CallOption) (*NewBlockResp, error)
	GetAllBlock(ctx context.Context, in *GetAllBlockReq, opts ...grpc.CallOption) (*GetAllBlockResp, error)
	GetAllTx(ctx context.Context, in *GetAllTxReq, opts ...grpc.CallOption) (*GetAllTxResp, error)
	GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error)
}

type rpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClient(cc grpc.ClientConnInterface) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) NewAccount(ctx context.Context, in *NewAccountReq, opts ...grpc.CallOption) (*NewAccountResp, error) {
	out := new(NewAccountResp)
	err := c.cc.Invoke(ctx, Rpc_NewAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetInfoByBlockNum(ctx context.Context, in *GetInfoByBlockNumReq, opts ...grpc.CallOption) (*GetInfoByBlockNumResp, error) {
	out := new(GetInfoByBlockNumResp)
	err := c.cc.Invoke(ctx, Rpc_GetInfoByBlockNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetInfoByBlockHash(ctx context.Context, in *GetInfoByBlockHashReq, opts ...grpc.CallOption) (*GetInfoByBlockHashResp, error) {
	out := new(GetInfoByBlockHashResp)
	err := c.cc.Invoke(ctx, Rpc_GetInfoByBlockHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) NewTx(ctx context.Context, in *NewTxReq, opts ...grpc.CallOption) (*NewTxResp, error) {
	out := new(NewTxResp)
	err := c.cc.Invoke(ctx, Rpc_NewTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetTxPool(ctx context.Context, in *GetTxPoolReq, opts ...grpc.CallOption) (*GetTxPoolResp, error) {
	out := new(GetTxPoolResp)
	err := c.cc.Invoke(ctx, Rpc_GetTxPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetInfoByTxHash(ctx context.Context, in *GetInfoByTxHashReq, opts ...grpc.CallOption) (*GetInfoByTxHashResp, error) {
	out := new(GetInfoByTxHashResp)
	err := c.cc.Invoke(ctx, Rpc_GetInfoByTxHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Mine(ctx context.Context, in *MineReq, opts ...grpc.CallOption) (*MineResp, error) {
	out := new(MineResp)
	err := c.cc.Invoke(ctx, Rpc_Mine_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) NewBlock(ctx context.Context, in *NewBlockReq, opts ...grpc.CallOption) (*NewBlockResp, error) {
	out := new(NewBlockResp)
	err := c.cc.Invoke(ctx, Rpc_NewBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetAllBlock(ctx context.Context, in *GetAllBlockReq, opts ...grpc.CallOption) (*GetAllBlockResp, error) {
	out := new(GetAllBlockResp)
	err := c.cc.Invoke(ctx, Rpc_GetAllBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetAllTx(ctx context.Context, in *GetAllTxReq, opts ...grpc.CallOption) (*GetAllTxResp, error) {
	out := new(GetAllTxResp)
	err := c.cc.Invoke(ctx, Rpc_GetAllTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetBalance(ctx context.Context, in *GetBalanceReq, opts ...grpc.CallOption) (*GetBalanceResp, error) {
	out := new(GetBalanceResp)
	err := c.cc.Invoke(ctx, Rpc_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
// All implementations must embed UnimplementedRpcServer
// for forward compatibility
type RpcServer interface {
	NewAccount(context.Context, *NewAccountReq) (*NewAccountResp, error)
	GetInfoByBlockNum(context.Context, *GetInfoByBlockNumReq) (*GetInfoByBlockNumResp, error)
	GetInfoByBlockHash(context.Context, *GetInfoByBlockHashReq) (*GetInfoByBlockHashResp, error)
	NewTx(context.Context, *NewTxReq) (*NewTxResp, error)
	GetTxPool(context.Context, *GetTxPoolReq) (*GetTxPoolResp, error)
	GetInfoByTxHash(context.Context, *GetInfoByTxHashReq) (*GetInfoByTxHashResp, error)
	Mine(context.Context, *MineReq) (*MineResp, error)
	NewBlock(context.Context, *NewBlockReq) (*NewBlockResp, error)
	GetAllBlock(context.Context, *GetAllBlockReq) (*GetAllBlockResp, error)
	GetAllTx(context.Context, *GetAllTxReq) (*GetAllTxResp, error)
	GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error)
	mustEmbedUnimplementedRpcServer()
}

// UnimplementedRpcServer must be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (UnimplementedRpcServer) NewAccount(context.Context, *NewAccountReq) (*NewAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (UnimplementedRpcServer) GetInfoByBlockNum(context.Context, *GetInfoByBlockNumReq) (*GetInfoByBlockNumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByBlockNum not implemented")
}
func (UnimplementedRpcServer) GetInfoByBlockHash(context.Context, *GetInfoByBlockHashReq) (*GetInfoByBlockHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByBlockHash not implemented")
}
func (UnimplementedRpcServer) NewTx(context.Context, *NewTxReq) (*NewTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTx not implemented")
}
func (UnimplementedRpcServer) GetTxPool(context.Context, *GetTxPoolReq) (*GetTxPoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxPool not implemented")
}
func (UnimplementedRpcServer) GetInfoByTxHash(context.Context, *GetInfoByTxHashReq) (*GetInfoByTxHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByTxHash not implemented")
}
func (UnimplementedRpcServer) Mine(context.Context, *MineReq) (*MineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mine not implemented")
}
func (UnimplementedRpcServer) NewBlock(context.Context, *NewBlockReq) (*NewBlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBlock not implemented")
}
func (UnimplementedRpcServer) GetAllBlock(context.Context, *GetAllBlockReq) (*GetAllBlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlock not implemented")
}
func (UnimplementedRpcServer) GetAllTx(context.Context, *GetAllTxReq) (*GetAllTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTx not implemented")
}
func (UnimplementedRpcServer) GetBalance(context.Context, *GetBalanceReq) (*GetBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedRpcServer) mustEmbedUnimplementedRpcServer() {}

// UnsafeRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcServer will
// result in compilation errors.
type UnsafeRpcServer interface {
	mustEmbedUnimplementedRpcServer()
}

func RegisterRpcServer(s grpc.ServiceRegistrar, srv RpcServer) {
	s.RegisterService(&Rpc_ServiceDesc, srv)
}

func _Rpc_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_NewAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).NewAccount(ctx, req.(*NewAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetInfoByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoByBlockNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetInfoByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_GetInfoByBlockNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetInfoByBlockNum(ctx, req.(*GetInfoByBlockNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetInfoByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoByBlockHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetInfoByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_GetInfoByBlockHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetInfoByBlockHash(ctx, req.(*GetInfoByBlockHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_NewTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).NewTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_NewTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).NewTx(ctx, req.(*NewTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetTxPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetTxPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_GetTxPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetTxPool(ctx, req.(*GetTxPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetInfoByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoByTxHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetInfoByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_GetInfoByTxHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetInfoByTxHash(ctx, req.(*GetInfoByTxHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Mine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Mine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_Mine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Mine(ctx, req.(*MineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_NewBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).NewBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_NewBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).NewBlock(ctx, req.(*NewBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetAllBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetAllBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_GetAllBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetAllBlock(ctx, req.(*GetAllBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetAllTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetAllTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_GetAllTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetAllTx(ctx, req.(*GetAllTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rpc_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetBalance(ctx, req.(*GetBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Rpc_ServiceDesc is the grpc.ServiceDesc for Rpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAccount",
			Handler:    _Rpc_NewAccount_Handler,
		},
		{
			MethodName: "GetInfoByBlockNum",
			Handler:    _Rpc_GetInfoByBlockNum_Handler,
		},
		{
			MethodName: "GetInfoByBlockHash",
			Handler:    _Rpc_GetInfoByBlockHash_Handler,
		},
		{
			MethodName: "NewTx",
			Handler:    _Rpc_NewTx_Handler,
		},
		{
			MethodName: "GetTxPool",
			Handler:    _Rpc_GetTxPool_Handler,
		},
		{
			MethodName: "GetInfoByTxHash",
			Handler:    _Rpc_GetInfoByTxHash_Handler,
		},
		{
			MethodName: "Mine",
			Handler:    _Rpc_Mine_Handler,
		},
		{
			MethodName: "NewBlock",
			Handler:    _Rpc_NewBlock_Handler,
		},
		{
			MethodName: "GetAllBlock",
			Handler:    _Rpc_GetAllBlock_Handler,
		},
		{
			MethodName: "GetAllTx",
			Handler:    _Rpc_GetAllTx_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Rpc_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snakecoin.proto",
}
